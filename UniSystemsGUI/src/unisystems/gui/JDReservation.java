/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unisystems.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import unisystems.Car;
import unisystems.LongTermCar;
import unisystems.Rental;
import unisystems.Reservation;
import unisystems.ReservationState;
import unisystems.Service;
import unisystems.Staff;
import unisystems.UniSystems;

/**
 *
 * @author Joseph Kellaway, Alex Murphy and Zakaria Robinson
 */
public class JDReservation extends javax.swing.JDialog {

    private JFHome parent;
    private Reservation reservation = null;

    /**
     * Creates new form JDReservation
     */
    public JDReservation(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void setParent(JFHome parent) {
        this.parent = parent;
    }
    
    public void setPanel(String panel){
        switch (panel){
            case "add":
                changePanel(pnlAddReservation);
                update(UniSystems.getInstance().getStaffList(), lstStaff);
                break;
            case "edit":
//                changePanel(pnlEditReservation);
                break;
            case "cancel":
//                changePanel(pnlDeleteReservation);
                break;
        }
    }
   
    private void changePanel(JPanel panel) {
        getContentPane().removeAll();
        getContentPane().add(panel, BorderLayout.CENTER);
        getContentPane().doLayout();
        update(getGraphics());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCancelReservation = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblCar = new javax.swing.JLabel();
        lblStaff = new javax.swing.JLabel();
        lblCollectionDate = new javax.swing.JLabel();
        lblReturnDate = new javax.swing.JLabel();
        btnCancelReservation = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        pnlAddReservation = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCars = new javax.swing.JList();
        btnCancelAddReservation = new javax.swing.JButton();
        btnSaveReservation = new javax.swing.JButton();
        dpCollectionDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstStaff = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dpReturnDate = new org.jdesktop.swingx.JXDatePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel6.setText("CANCEL RESERVATION");

        jLabel7.setText("Car:");

        jLabel8.setText("Staff Member:");

        jLabel9.setText("Collection Date:");

        jLabel10.setText("Return Date:");

        lblCar.setText("lblCar");

        lblStaff.setText("lblStaff");

        lblCollectionDate.setText("lblCollectionDate");

        lblReturnDate.setText("lblReturnDate");

        btnCancelReservation.setText("Delete Reservation");
        btnCancelReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelReservationActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCancelReservationLayout = new javax.swing.GroupLayout(pnlCancelReservation);
        pnlCancelReservation.setLayout(pnlCancelReservationLayout);
        pnlCancelReservationLayout.setHorizontalGroup(
            pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCancelReservationLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlCancelReservationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCancelReservationLayout.createSequentialGroup()
                        .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(48, 48, 48)
                        .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReturnDate)
                            .addComponent(lblCollectionDate)
                            .addComponent(lblStaff)
                            .addComponent(lblCar))
                        .addGap(0, 360, Short.MAX_VALUE))
                    .addGroup(pnlCancelReservationLayout.createSequentialGroup()
                        .addComponent(btnCancelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlCancelReservationLayout.setVerticalGroup(
            pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCancelReservationLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblCar))
                .addGap(18, 18, 18)
                .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblStaff))
                .addGap(18, 18, 18)
                .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lblCollectionDate))
                .addGap(33, 33, 33)
                .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lblReturnDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addGroup(pnlCancelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setText("NEW RESERVATION");

        lstCars.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCarsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstCars);

        btnCancelAddReservation.setText("Cancel");
        btnCancelAddReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAddReservationActionPerformed(evt);
            }
        });

        btnSaveReservation.setText("Save");
        btnSaveReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveReservationActionPerformed(evt);
            }
        });

        dpCollectionDate.setEnabled(false);
        dpCollectionDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpCollectionDateActionPerformed(evt);
            }
        });

        jLabel2.setText("Staff:");

        lstStaff.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstStaffValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstStaff);

        jLabel4.setText("Collection Date:");

        jLabel3.setText("Car:");

        jLabel5.setText("Return Date:");

        dpReturnDate.setEnabled(false);
        dpReturnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpReturnDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddReservationLayout = new javax.swing.GroupLayout(pnlAddReservation);
        pnlAddReservation.setLayout(pnlAddReservationLayout);
        pnlAddReservationLayout.setHorizontalGroup(
            pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddReservationLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlAddReservationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddReservationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAddReservationLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(dpCollectionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAddReservationLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(dpReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(172, 172, 172))
            .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlAddReservationLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnSaveReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelAddReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        pnlAddReservationLayout.setVerticalGroup(
            pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddReservationLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dpCollectionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dpReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
            .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlAddReservationLayout.createSequentialGroup()
                    .addContainerGap(266, Short.MAX_VALUE)
                    .addGroup(pnlAddReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancelAddReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSaveReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCancelReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlAddReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCancelReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlAddReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstCarsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCarsValueChanged
        if (!evt.getValueIsAdjusting()) {
            Car car = (Car) lstCars.getSelectedValue();

            this.dpCollectionDate.setDate(Date.from(LocalDate.now().plus(1, ChronoUnit.DAYS).atStartOfDay(ZoneId.systemDefault()).toInstant()));
            this.dpCollectionDate.setEnabled(true);
            this.dpReturnDate.setDate(Date.from(LocalDate.now().plus(1, ChronoUnit.DAYS).atStartOfDay(ZoneId.systemDefault()).toInstant()));
            this.dpReturnDate.setEnabled(true);
        }
    }//GEN-LAST:event_lstCarsValueChanged

    private void btnCancelAddReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAddReservationActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelAddReservationActionPerformed

    private void btnSaveReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveReservationActionPerformed
        try {
            validateInputs();
            Staff staff = (Staff) lstStaff.getSelectedValue();
            LongTermCar car = (LongTermCar) lstCars.getSelectedValue();
            Date pickedCollectionDate = dpCollectionDate.getDate();
            Date pickedReturnDate = dpReturnDate.getDate();
            LocalDate collectDate = pickedCollectionDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate returnDate = pickedReturnDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            Reservation newReservation = new Reservation(collectDate, returnDate, staff.getiD(), 2);
            Boolean datesClash = false;

            for (Reservation reservation : car.getArlReservationList()) {
                if (reservation.doDatesClash(collectDate, returnDate)) {
                    if (reservation.getState() == ReservationState.OPEN) {
                        datesClash = true;
                        break;
                    }
                }
            }
            if (!collectDate.isAfter(returnDate))
            {
                if (!datesClash){
                    for (Service service : car.getServiceHistory()){
                        if (service.doDatesClash(collectDate, returnDate)){
                            datesClash = true;
                            break;
                        }
                    }

                    if (!datesClash){
                        if (!car.getRentalHistory().getRentalHistory().isEmpty()) { //.getRentalHistory needed twice because of iterator interface
                            for (Rental rental : car.getRentalHistory()){
                                if (rental.doDatesClash(collectDate, returnDate)){
                                    datesClash = true;
                                    break;
                                }
                            }
                        }
                        if (!datesClash){
                            car.addNewReservation(newReservation);
                            this.parent.updateReservations();
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "The vehicle is rented on this date.", "Dates clash", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The vehicle is booked to be serviced.", "Dates clash", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "The vehicle is already reserved on this date.", "Dates clash", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The collection date cannot be before the return date", "Date error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Input error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveReservationActionPerformed

    private void lstStaffValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstStaffValueChanged
        if (!evt.getValueIsAdjusting()) {
            ArrayList<Car> arlCars = new ArrayList<>();
            Staff staff = (Staff) lstStaff.getSelectedValue();

            for (Car car : UniSystems.getInstance().getCarList()) {
                if ((car instanceof LongTermCar) && (staff.getVehicleAccessGroup().getVehicles().contains(car.getTypeOfVehicle()))) {
                    arlCars.add(car);
                }
            }

            update(arlCars, lstCars);
            lstCars.setEnabled(true);
        }
    }//GEN-LAST:event_lstStaffValueChanged

    private void dpCollectionDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpCollectionDateActionPerformed
        if (dpCollectionDate.getDate().after(dpReturnDate.getDate())) {
            dpReturnDate.setDate(dpCollectionDate.getDate());
        }
    }//GEN-LAST:event_dpCollectionDateActionPerformed

    private void dpReturnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpReturnDateActionPerformed
        if (dpCollectionDate.getDate().after(dpReturnDate.getDate())) {
            dpCollectionDate.setDate(dpReturnDate.getDate());
        }
    }//GEN-LAST:event_dpReturnDateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnCancelReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelReservationActionPerformed
        this.reservation.setState(ReservationState.CANCELLED);
        this.parent.updateReservations();
        this.dispose();
    }//GEN-LAST:event_btnCancelReservationActionPerformed
    
    public void showReservation(Reservation reservation){
        this.reservation = reservation;
        for (Car car : UniSystems.getInstance().getCarList()){
            if (car instanceof LongTermCar){
                for (Reservation res : ((LongTermCar) car).getArlReservationList()){
                    if (res.equals(reservation)){
                        this.lblCar.setText(car.getRegistration());
                    }
                }
            }
        }
        this.lblStaff.setText(reservation.getStaffId().toString());
        this.lblCollectionDate.setText(reservation.getReservationStartDate().toString());
        this.lblReturnDate.setText(reservation.getReservationEndDate().toString());
    }
    
    public final void update(ArrayList arlList, JList locList){
        DefaultListModel<Object> newModel = new DefaultListModel<>();

        if (locList.equals(this.lstStaff)) {
            for (Object currObject: arlList){
                if (!((Staff) currObject).getiD().equals(this.parent.getLogin())) {
                    newModel.addElement(currObject);
                }
            }
        } else {
            for (Object currObject: arlList){
                newModel.addElement(currObject);
            }
        }
        
        locList.setModel(newModel);
    }

    public Component[] getInputFields( ) {
        Component[] inputFields = {this.dpCollectionDate, this.dpReturnDate};
        return inputFields;
    }
    
    public void validateInputs() throws Exception {
        //validate code
        Instant today = LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant();
        Boolean error = false;
        String errorMessage = "";
        //Object[] inputFields = new Object[5];

        Component[] inputFields = getInputFields();

        try {
            if (lstStaff.getSelectedIndex() == -1){
                error = true;
                errorMessage = "Staff member must be selected from list.";
            } else if (lstCars.getSelectedIndex() == -1){
                error = true;
                errorMessage = "Car must be selected from list.";
            } else if (((org.jdesktop.swingx.JXDatePicker)inputFields[0]).getDate() == null){
                error = true;
                errorMessage = "A collection date must be selected.";
            } else if (((org.jdesktop.swingx.JXDatePicker)inputFields[0]).getDate().before(Date.from(today))) {
                error = true;
                errorMessage = "Planned collection date cannot be before today's date.";
            } else if (((org.jdesktop.swingx.JXDatePicker)inputFields[1]).getDate() == null){
                error = true;
                errorMessage = "A return date must be selected.";
            } else if (((org.jdesktop.swingx.JXDatePicker)inputFields[1]).getDate().before(Date.from(today))) {
                error = true;
                errorMessage = "Planned returned date cannot be before today's date.";
            }
        } catch (Exception ex) {
            errorMessage = ex.getMessage();
        }

        if (error) {
            throw new Exception(errorMessage);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDReservation dialog = new JDReservation(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancelAddReservation;
    private javax.swing.JButton btnCancelReservation;
    private javax.swing.JButton btnSaveReservation;
    private org.jdesktop.swingx.JXDatePicker dpCollectionDate;
    private org.jdesktop.swingx.JXDatePicker dpReturnDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCar;
    private javax.swing.JLabel lblCollectionDate;
    private javax.swing.JLabel lblReturnDate;
    private javax.swing.JLabel lblStaff;
    private javax.swing.JList lstCars;
    private javax.swing.JList lstStaff;
    private javax.swing.JPanel pnlAddReservation;
    private javax.swing.JPanel pnlCancelReservation;
    // End of variables declaration//GEN-END:variables
}
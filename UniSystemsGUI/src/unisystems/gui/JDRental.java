/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unisystems.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import unisystems.Car;
import unisystems.LongTermCar;
import unisystems.Rental;
import unisystems.Reservation;
import unisystems.ReservationState;
import unisystems.Service;
import unisystems.Staff;
import unisystems.TypeOfVehicle;
import unisystems.UniSystems;

/**
 *
 * @author Joseph Kellaway, Alex Murphy and Zakaria Robinson
 */
public class JDRental extends javax.swing.JDialog {

    private ArrayList<Rental> currentRentalList;
    private ArrayList<Rental> allRentalsList;
    private JFHome parent;
    private DefaultComboBoxModel<TypeOfVehicle> model =
            new DefaultComboBoxModel<>(TypeOfVehicle.values());
    private Rental thisRental = null;
    
    /**
     * Creates new form Rental
     */
    public JDRental(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        LocalDate localDate = LocalDate.now();
        Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

        dpDateReturned.setDate(date);
    }
    
    /**
     * sets the parent frame
     * @param parent 
     */
    public void setParent(JFHome parent) {
        this.parent = parent;
    }
    
    /**
     *  A string that determines which panel to add
     * Case statement that determines which panel to display
     * @param panel 
     */
    
    public void setPanel(String panel){
        switch (panel){
            case "add":
                changePanel(pnlAddRental);
                update(UniSystems.getInstance().getStaffList(), lstStaff);
                break;
            case "return":
                changePanel(pnlReturnRental);
                populateReturnData();
                break;
            case "review":
                changePanel(pnlReviewRental);
                allRentals();
                lblRegistration.setVisible(false);
                lblStaffID.setVisible(false);
                lblStartDate.setVisible(false);
                lblExpected.setVisible(false);
                lblActual.setVisible(false);
                lblNotes.setVisible(false);
                break;
        }
    }
    
    /**
     * removes the current panel
     * Changes the panel
     * @param panel to display
     */
    private void changePanel(JPanel panel) {
        getContentPane().removeAll();
        getContentPane().add(panel, BorderLayout.CENTER);
        getContentPane().doLayout();
        update(getGraphics());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlReviewRental = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblActual = new javax.swing.JLabel();
        lblExpected = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        lblStaffID = new javax.swing.JLabel();
        lblRegistration = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnCloseReview = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstReviewRentals = new javax.swing.JList();
        jLabel15 = new javax.swing.JLabel();
        lblNotes = new javax.swing.JLabel();
        pnlAddRental = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstStaff = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCars = new javax.swing.JList();
        btnCancelAddRental = new javax.swing.JButton();
        btnSaveRental = new javax.swing.JButton();
        dpReturnDate = new org.jdesktop.swingx.JXDatePicker();
        pnlReturnRental = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        btnSaveReturn = new javax.swing.JButton();
        btnCancelReturn = new javax.swing.JButton();
        dpDateReturned = new org.jdesktop.swingx.JXDatePicker();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lblReturnExpected = new javax.swing.JLabel();
        lblReturnStartDate = new javax.swing.JLabel();
        lblReturnStaffID = new javax.swing.JLabel();
        lblReturnRegistration = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel5.setText("Start Date");

        jLabel6.setText("Expected Return Date");

        jLabel7.setText("Actual Return Date");

        lblActual.setText("lblActual");

        lblExpected.setText("lblExpected");

        lblStartDate.setText("lblStartDate");

        lblStaffID.setText("lblStaffID");

        lblRegistration.setText("lblRegistration");

        jLabel8.setText("REVIEW RENTAL");

        btnCloseReview.setText("Close");
        btnCloseReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseReviewActionPerformed(evt);
            }
        });

        jLabel9.setText("Car Registration");

        jLabel10.setText("Staff ID");

        lstReviewRentals.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstReviewRentalsValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(lstReviewRentals);

        jLabel15.setText("Notes");

        lblNotes.setText("lblNotes");

        javax.swing.GroupLayout pnlReviewRentalLayout = new javax.swing.GroupLayout(pnlReviewRental);
        pnlReviewRental.setLayout(pnlReviewRentalLayout);
        pnlReviewRentalLayout.setHorizontalGroup(
            pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReviewRentalLayout.createSequentialGroup()
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(pnlReviewRentalLayout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlReviewRentalLayout.createSequentialGroup()
                                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel15))
                                .addGap(146, 146, 146)
                                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblExpected)
                                    .addComponent(lblActual)
                                    .addComponent(lblStartDate)
                                    .addComponent(lblStaffID)
                                    .addComponent(lblRegistration)
                                    .addComponent(lblNotes)))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(121, 130, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReviewRentalLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCloseReview, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlReviewRentalLayout.setVerticalGroup(
            pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReviewRentalLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lblRegistration))
                .addGap(18, 18, 18)
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lblStaffID))
                .addGap(18, 18, 18)
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblStartDate))
                .addGap(18, 18, 18)
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblExpected))
                .addGap(18, 18, 18)
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblActual))
                .addGap(18, 18, 18)
                .addGroup(pnlReviewRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(lblNotes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(btnCloseReview, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlAddRental.setPreferredSize(new java.awt.Dimension(555, 400));

        jLabel1.setText("NEW RENTAL");

        jLabel2.setText("Staff");

        lstStaff.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstStaffValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstStaff);

        jLabel4.setText("Return Date:");

        jLabel3.setText("Car");

        lstCars.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCarsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstCars);

        btnCancelAddRental.setText("Cancel");
        btnCancelAddRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAddRentalActionPerformed(evt);
            }
        });

        btnSaveRental.setText("Save");
        btnSaveRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveRentalActionPerformed(evt);
            }
        });

        dpReturnDate.setEnabled(false);

        javax.swing.GroupLayout pnlAddRentalLayout = new javax.swing.GroupLayout(pnlAddRental);
        pnlAddRental.setLayout(pnlAddRentalLayout);
        pnlAddRentalLayout.setHorizontalGroup(
            pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddRentalLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlAddRentalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddRentalLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAddRentalLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addGroup(pnlAddRentalLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(dpReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddRentalLayout.createSequentialGroup()
                        .addComponent(btnSaveRental, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelAddRental, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlAddRentalLayout.setVerticalGroup(
            pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddRentalLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddRentalLayout.createSequentialGroup()
                        .addGroup(pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dpReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(140, 140, 140)
                .addGroup(pnlAddRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelAddRental, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveRental, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel11.setText("RETURN RENTAL");

        jLabel12.setText("Notes:");

        jLabel13.setText("Date Returned:");

        txtNotes.setColumns(20);
        txtNotes.setRows(5);
        jScrollPane4.setViewportView(txtNotes);

        btnSaveReturn.setText("Save");
        btnSaveReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveReturnActionPerformed(evt);
            }
        });

        btnCancelReturn.setText("Cancel");
        btnCancelReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelReturnActionPerformed(evt);
            }
        });

        jLabel16.setText("Car Registration");

        jLabel17.setText("Staff ID");

        jLabel18.setText("Start Date");

        jLabel19.setText("Expected Return Date");

        lblReturnExpected.setText("lblReturnExpected");

        lblReturnStartDate.setText("lblReturnStartDate");

        lblReturnStaffID.setText("lblReturnStaffID");

        lblReturnRegistration.setText("lblReturnRegistration");

        javax.swing.GroupLayout pnlReturnRentalLayout = new javax.swing.GroupLayout(pnlReturnRental);
        pnlReturnRental.setLayout(pnlReturnRentalLayout);
        pnlReturnRentalLayout.setHorizontalGroup(
            pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                        .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel13)))
                        .addGap(61, 61, 61)
                        .addComponent(dpDateReturned, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReturnRentalLayout.createSequentialGroup()
                                .addComponent(btnSaveReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancelReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                                        .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel16)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel19))
                                        .addGap(146, 146, 146)
                                        .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblReturnExpected)
                                            .addComponent(lblReturnStartDate)
                                            .addComponent(lblReturnStaffID)
                                            .addComponent(lblReturnRegistration)))
                                    .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(61, 61, 61)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 145, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        pnlReturnRentalLayout.setVerticalGroup(
            pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReturnRentalLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(7, 7, 7)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(lblReturnRegistration))
                .addGap(18, 18, 18)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(lblReturnStaffID))
                .addGap(18, 18, 18)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(lblReturnStartDate))
                .addGap(18, 18, 18)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(lblReturnExpected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dpDateReturned, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(pnlReturnRentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlReviewRental, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlAddRental, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlReturnRental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlReviewRental, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlAddRental, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlReturnRental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Disposes of this JDRental dialog and returns the user to the JFHome frame
     * @param evt 
     */
    private void btnCancelAddRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAddRentalActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelAddRentalActionPerformed

    /**
     * Disposes of this JDRental dialog and returns the user to the JFHome frame
     * @param evt 
     */
    private void btnCancelReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelReturnActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelReturnActionPerformed

    /**
     * Disposes of this JDRental dialog and returns the user to the JFHome frame
     * @param evt 
     */
    private void btnCloseReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseReviewActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseReviewActionPerformed

    /**
     * populates the list of cars based of off the enum value of the selected StaffMember
     * @param evt 
     */
    private void lstStaffValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstStaffValueChanged
        if (!evt.getValueIsAdjusting()) {
            ArrayList<Car> arlCars = new ArrayList<>();
            Staff staff = (Staff) lstStaff.getSelectedValue();
            
            for (Car car : UniSystems.getInstance().getCarList()) {
                if ((car.getAvailability()) && (staff.getVehicleAccessGroup().getVehicles().contains(car.getTypeOfVehicle()))) {
                    arlCars.add(car);
                }
            }
            
            update(arlCars, lstCars);
            lstCars.setEnabled(true);
        }
    }//GEN-LAST:event_lstStaffValueChanged

    /**
     * When the car is selected allows the user to select the date, or is disallows if it's a short term car
     * @param evt 
     */
    private void lstCarsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCarsValueChanged
        if (!evt.getValueIsAdjusting()) {
            Car car = (Car) lstCars.getSelectedValue();
            
            dpReturnDate.setDate(Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant()));
            
            if (car instanceof LongTermCar) {
                dpReturnDate.setEnabled(true);
            } else {
                LocalDate localDate = LocalDate.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, d MMMM y");
                String formattedString = localDate.format(formatter);
                dpReturnDate.setEnabled(false);
            }
        }
    }//GEN-LAST:event_lstCarsValueChanged

    
    private void btnSaveRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveRentalActionPerformed
        try {
            validateInputs(this.pnlAddRental);
            Staff staff = (Staff) lstStaff.getSelectedValue();
            Car car = (Car) lstCars.getSelectedValue();
            Date pickedDate = dpReturnDate.getDate();
            LocalDate returnDate = pickedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            Rental newRental = new Rental(staff.getiD(), LocalDate.now(), returnDate, null, "Unknown");
            
            Boolean doDatesClash = false;

            for (Rental rental : car.getRentalHistory()) {
                if (rental.doDatesClash(LocalDate.now(), returnDate)) {
                    doDatesClash = true;
                    break;
                }
            }
            if (!LocalDate.now().isAfter(returnDate))
            {
                if (!doDatesClash){
                    for (Service service : car.getServiceHistory()){
                        if (service.doDatesClash(LocalDate.now(), returnDate)){
                            doDatesClash = true;
                            break;
                        }
                    }
                    if (!doDatesClash){
                        if (car instanceof LongTermCar){
                            for (Reservation reservation : ((LongTermCar) car).getArlReservationList()){
                                if (reservation.doDatesClash(LocalDate.now(), returnDate)){
                                    if (reservation.getStaffId().equals(staff.getiD())){
                                        reservation.setState(ReservationState.COLLECTED);
                                        this.parent.updateReservations();
                                    } else {
                                        doDatesClash = true;
                                    }
                                    break;
                                }
                            }
                        }
                        if (!doDatesClash){
                            car.addRental(newRental);
                            car.setAvailability(false);
                            this.parent.updateRentals();
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "The vehicle is reserved for this date.", "Dates clash", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The vehicle is booked to be serviced.", "Dates clash", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "The vehicle is already being rented on this date.", "Dates clash", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The collection date cannot be before the return date", "Date error", JOptionPane.ERROR_MESSAGE);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Input error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveRentalActionPerformed

    private void btnSaveReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveReturnActionPerformed
        try {
            validateInputs(this.pnlReturnRental);
            String notes = txtNotes.getText();
            Date pickedDate = dpDateReturned.getDate();
            LocalDate dateReturned = pickedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            for (Car car : UniSystems.getInstance().getCarList()) {
                for (Rental rental : car.getRentalHistory()) {
                    if (rental.equals(thisRental)) {
                        rental.setDateReturned(dateReturned);
                        rental.setNotes(notes);
                        car.setAvailability(true);
                        break;
                    }
                }
            }
            this.parent.updateRentals();
            this.dispose();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Input error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveReturnActionPerformed

    private void lstReviewRentalsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstReviewRentalsValueChanged
        if (!evt.getValueIsAdjusting()) {
            Integer index = lstReviewRentals.getSelectedIndex();
            Rental newRental = allRentalsList.get(index);
            
            for (Car car : UniSystems.getInstance().getCarList()) {
                for (Rental rental : car.getRentalHistory()) {
                    if (rental.equals(newRental)) {
                        lblRegistration.setText(car.getRegistration());
                        lblStaffID.setText(rental.getStaffId().toString());
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, d MMMM y");
                        lblStartDate.setText(rental.getDateRented().format(formatter));
                        lblExpected.setText(rental.getReturnDate().format(formatter));
                        if (rental.getDateReturned() == null) {
                            lblActual.setText("Not returned yet");
                        } else {
                            lblActual.setText(rental.getDateReturned().format(formatter));
                        }
                        lblNotes.setText(rental.getNotes());
                        lblRegistration.setVisible(true);
                        lblStaffID.setVisible(true);
                        lblStartDate.setVisible(true);
                        lblExpected.setVisible(true);
                        lblActual.setVisible(true);
                        lblNotes.setVisible(true);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_lstReviewRentalsValueChanged

    
    private void allRentals() {
        allRentalsList = new ArrayList<>();
        DefaultListModel<Object> newModel = new DefaultListModel<>();
        ArrayList<Car> arlCarList = UniSystems.getInstance().getCarList();

        for (Car car : arlCarList){
            for (Rental rental : car.getRentalHistory()){
                allRentalsList.add(rental);
                newModel.addElement(car.getRegistration() + " rented by " + rental.toString());
            }
        }
        lstReviewRentals.setModel(newModel);
    }
    
    private Boolean populateReturnData() {
        for (Car car : UniSystems.getInstance().getCarList()) {
            for (Rental rental : car.getRentalHistory()) {
                if (rental.equals(this.thisRental)) {
                    lblReturnRegistration.setText(car.getRegistration());
                    lblReturnStaffID.setText(rental.getStaffId().toString());
                    lblReturnStartDate.setText(rental.getDateRented().toString());
                    lblReturnExpected.setText(rental.getReturnDate().toString());
                    return true;
                }
            }
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDRental.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDRental.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDRental.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDRental.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDRental dialog = new JDRental(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public final void update(ArrayList arlList, JList locList){
        DefaultListModel<Object> newModel = new DefaultListModel<>();

        if (locList.equals(this.lstStaff)) {
            for (Object currObject: arlList){
                if (!((Staff) currObject).getiD().equals(this.parent.getLogin())) {
                    newModel.addElement(currObject);
                }
            }
        } else {
            for (Object currObject: arlList){
                newModel.addElement(currObject);
            }
        }
        locList.setModel(newModel);
    }
    
    public void setRental(Rental rental) {
        this.thisRental = rental;
    }
    
    public Component[] getInputFields(JPanel panel) {
        if (panel == pnlAddRental){
            Component[] inputFields = {this.dpReturnDate};
            return inputFields;
        } else if (panel == pnlReturnRental){
            Component[] inputFields = {this.dpDateReturned, this.txtNotes};
            return inputFields;
        }
        return null;
    }
    
    public void validateInputs(JPanel panel) throws Exception {
        //validate code
        Instant today = LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant();
        Boolean error = false;
        String errorMessage = "";
        //Object[] inputFields = new Object[5];

        Component[] inputFields = getInputFields(panel);

        try {
            if (panel == pnlAddRental){
                if (lstStaff.getSelectedIndex() == -1){
                    error = true;
                    errorMessage = "Staff member must be selected from list.";
                } else if (lstCars.getSelectedIndex() == -1){
                    error = true;
                    errorMessage = "Car must be selected from list.";
                } else if (((org.jdesktop.swingx.JXDatePicker)inputFields[0]).getDate() == null){
                    error = true;
                    errorMessage = "A return date must be selected.";
                } else if (((org.jdesktop.swingx.JXDatePicker)inputFields[0]).getDate().before(Date.from(today))) {
                    error = true;
                    errorMessage = "Planned returned date cannot be before today's date.";
                }
            } else if (panel == pnlReturnRental){
                if (((org.jdesktop.swingx.JXDatePicker)inputFields[0]).getDate() == null){
                    error = true;
                    errorMessage = "A return date must be selected.";
                }else if (((org.jdesktop.swingx.JXDatePicker)inputFields[0]).getDate().after(Date.from(today))) {
                    error = true;
                    errorMessage = "Actual return date cannot be after today's date.";
                } else if ("".equals(((javax.swing.JTextArea)inputFields[1]).getText())) {
            error = true;
            errorMessage = "No notes entered.";
                }
            }
        } catch (IndexOutOfBoundsException ex) {

        }

        if (error) {
            throw new Exception(errorMessage);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelAddRental;
    private javax.swing.JButton btnCancelReturn;
    private javax.swing.JButton btnCloseReview;
    private javax.swing.JButton btnSaveRental;
    private javax.swing.JButton btnSaveReturn;
    private org.jdesktop.swingx.JXDatePicker dpDateReturned;
    private org.jdesktop.swingx.JXDatePicker dpReturnDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblActual;
    private javax.swing.JLabel lblExpected;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblRegistration;
    private javax.swing.JLabel lblReturnExpected;
    private javax.swing.JLabel lblReturnRegistration;
    private javax.swing.JLabel lblReturnStaffID;
    private javax.swing.JLabel lblReturnStartDate;
    private javax.swing.JLabel lblStaffID;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JList lstCars;
    private javax.swing.JList lstReviewRentals;
    private javax.swing.JList lstStaff;
    private javax.swing.JPanel pnlAddRental;
    private javax.swing.JPanel pnlReturnRental;
    private javax.swing.JPanel pnlReviewRental;
    private javax.swing.JTextArea txtNotes;
    // End of variables declaration//GEN-END:variables
}